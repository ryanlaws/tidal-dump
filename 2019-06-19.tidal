import Data.Fixed (mod')


	d1 $ stack [
		s "808bd@1",
		s "bd!42 sd!28" # gain (1 - (timeDog saw [3, 2, 3])) # cut 1
	]

d1 $ stack [ 
	s "808bd@5 <808bd ~>@1 808bd@3" # gain 1.2 # n 3,
	s "bd!42 sd!28" # gain (timeDog saw [3, 2, 3]) # cut 1 
] 

-- timeDog :: Pattern a -> [Time] -> Pattern a
-- timeDog p ts = timeCat (map (\t -> (t, p)) ts)

-- I DEED IT
-- now I need to figure out where to stick mah timeDog
d1 $ stack [ 
	s "808bd@4 <808bd ~>@1 808bd@3" # gain 1.0 # shape 0.4 # n 6,
	s "bd!160 sd!96" 
		# gain (range 0.2 0.6 $ timeDog (fast 1.0 saw) [2, 3, 2, 1]) # cut 1 
		# speed (range 0.5 5 $ slow 5 sine)
		# interp 1
] 

--timeDog p ts = timeCat (map (\t -> (t, p)) ts)
d1 $ slow 2 $ timeCat [ 
	(2, fast (range 1 16 $ slow 5 sine) $ s "808bd" # speed 1.5), 
	(4, fast (range 1 8 $ slow 7 sine) $ s "808"),
	(3, fast (range 1 16 $ slow 3 sine) $ s "808sd" # speed 1.5),
	(7, fast (range 1 8 $ slow 11 sine) $ s "808") 
] # n (range 0 16 $ fast (range 0.1 5 $ slow 11 sine) saw) 
# gain 0.8
# cut 1

d2 $ stack [
	slow 2 $ s "808bd@2 ~ [808bd*4]@1 808sd ~ 808bd [808bd*3]@5 808sd ~ ~ 808bd" # n 8,
	s "[808*3]*4" # n 1 # gain (range 0.9 0.6 $ fast 4 saw)
	-- s "[~ 808*2]*4" # n 1
]



saw2 :: (Fractional a, Real a) => Pattern a
saw2 = sig $ \t -> let t' = mod' (fromRational t) 1 in if (t' < 0.6) then (t'/0.6) else ((t'-0.6)/0.4)

saw2 :: a => (Fractional a, Real a) => Pattern a
saw2 = \x -> sig $ \t -> let t' = mod' (fromRational t) 1 in if (t' < x) then (t'/x) else ((t'-x)/(1-x))

:t mod'

:t gain

:t saw

:t saw2

d1 $ stack [
	s "bd!10 sd!6" # gain (range 1.0 0.6 
		((fast 2 saw)))
	,degradeBy 0.1 $ s "juno" # n 0 # gain 0.9 
		+ up "5@8 5@2 15@6" 
		# loop 8 # release 2 # cut 1
	, s "arpy" # up 12 + up "7@8 7@2 5@6" # gain 0.9 # release 0.1
] 
# nudge "[0 0.04]*8"

:t nudge

:t saw
