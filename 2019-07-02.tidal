once $ stack [
		ccv 0 # ccn 0,
		ccv 0 # ccn 32,
		progNum 6
	]
	# s "nd" 
	# midichan 2

d1 $ stack [
		whenmod 5 4 (within (7/8, 1) $ const (n "0!16" # gain 1.1))
			$ whenmod 6 5 (within (7/8, 1) $ const (n "0!8" # gain 1.1))
			$ n "0@3 0@5" # gain 1.2,
		n "[~ 1@3] [<1 [1 ~ 1 1]> <~ [1 ~ 1 ~]>]" # gain 0.9,
		whenmod 4 3 (within (3/4, 1) $ fast 2) 
			$ whenmod 3 2 (within (2/4, 1) $ fast (3/2))
			$ n "2*8" # gain 0.9,
		n "[~ 3]*2" # gain 1.1
	]
	# midichan 2
	# s "nd" - n 12

:t within 

:t timeDog

d2 $ stack [
		(whenmod 8 7 $ within ((1/4), (3/4)) (const $ n "5*2")) $ slow 2 $ n "<2 0>",
		ccv 90 # ccn 40, --  LEVEL VCO 2 
		struct "t(3, 16)*8"
			$ ccv (range 0 120 saw) # ccn 37, --  SHAPE VCO 2 
		ccv 64 # ccn 51, --  WAVE VCO 2 
		ccv 0 # ccn 28, --  DRIVE
		ccv 64 # ccn 25, --  EG INT
		ccv 50 # ccn 44, --  RESIN 
		ccv (segment 48 $ fast (8/3) $ timeDog 
			(range 50 120 $ saw) 
			[2, 1, 1, 3, 1, 2, 1, 4, 1]) # ccn 43, --  CUTOFF
		ccv (segment 48 $ fast (15/2) $ timeDog 
			(range 20 90 $ square) 
			[1, 5, 1, 3, 2, 4]) # ccn 35 --  PITCH VCO 2 
	]
	# s "mnlg" 
	-- - n 12

d3 
-- GLOBULAR BEATNUS
$ chew 8 "[0 <1 2>*[90 2 35 42] 1 <4 7>*<2 4 6 8 32> <2 5 6>*4 1]/<2 3 4>" 
$ stack [
	n (struct "t(3, 8)" $ (choose [1..15])) # s "808bd" # cut 1,
	n (struct "[~ t]*2" $ irand 15) # s "808sd" # cut 2,
	n "[1*4]*<1 2 3>" # s "808" 
		# gain (slow 4 $ timeDog (range 0.7 1.0 $ saw) [1..8])
		# cut 3
] 
# interp 1 
# cps (slow 6 $ range 1.5 0.5 saw)
